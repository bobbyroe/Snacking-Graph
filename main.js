// Generated by CoffeeScript 1.7.1
var bar_height, height, is_sorted_by_alpha, log, onClick, onKeyDown, snack_data, sort_string, sort_strings, svg, type, update, width, y;

log = console.log.bind(console);

width = window.innerWidth - 200;

height = window.innerHeight - 60;

sort_strings = ['Name', 'weight_in_g', 'Protein_in_g', 'Saturated_Fat_in_g', 'Sugar_in_g', 'Sodium_in_mg'];

sort_string = 'Name';

svg = d3.select("body").append("svg").attr("width", width).attr("height", height);

snack_data = [];

bar_height = 30;

is_sorted_by_alpha = true;

y = d3.scale.ordinal().rangeRoundBands([-20, height], .1, 1);

d3.csv("data/Snack_Composition.csv", type, function(error, data) {
  var bar, scale;
  snack_data = data;
  scale = 4;
  snack_data.sort(function(a, b) {
    return d3.ascending(a.Name, b.Name);
  });
  y.domain(snack_data.map(function(d) {
    return d.Name;
  }));
  log(snack_data);
  bar = svg.selectAll("g").data(snack_data).enter().append("g").on('click', function(d, i) {
    return log(d);
  }).attr("transform", function(d, i) {
    return "translate(250, " + (y(d.Name)) + ")";
  });
  bar.append("rect").style('stroke-width', '2px').style('stroke', 'rgba(0, 98, 255, 0.8)').attr("width", function(data, i) {
    return data.weight_in_g * scale;
  }).attr("height", bar_height - 1);
  bar.append("rect").attr('class', 'protein').attr("width", function(data, i) {
    return data.Protein_in_g * scale;
  }).attr("height", bar_height - 1);
  bar.append("rect").attr('class', 'fat').attr('x', function(data, i) {
    return data.Protein_in_g * scale;
  }).attr("width", function(data, i) {
    return data.Saturated_Fat_in_g * scale;
  }).attr("height", bar_height - 1);
  bar.append("rect").attr('class', 'sugar').attr('x', function(data, i) {
    return data.Protein_in_g * scale + data.Saturated_Fat_in_g * scale;
  }).attr("width", function(data, i) {
    return data.Sugar_in_g * scale;
  }).attr("height", bar_height - 1);
  bar.append("text").attr('x', function(data, i) {
    return data.weight_in_g * scale - 15;
  }).attr("y", bar_height - 12).text(function(d) {
    return "" + (Math.round(d.weight_in_g)) + "g";
  });
  return bar.append("text").attr('x', function(data, i) {
    return -10;
  }).attr("y", bar_height - 12).style("text-anchor", "end").text(function(d) {
    return d.Name;
  });
});

update = function() {
  var fn, transition, y0;
  fn = function(a, b) {
    return d3.ascending(+a[sort_string], +b[sort_string]);
  };
  if (sort_string === 'Name') {
    fn = function(a, b) {
      return d3.ascending(a[sort_string], b[sort_string]);
    };
  }
  y0 = y.domain(snack_data.sort(fn).map(function(d) {
    return d.Name;
  })).copy();
  transition = svg.transition().duration(500);
  return transition.selectAll("g").delay(function(d, i) {
    return i * 50;
  }).attr("transform", function(d, i) {
    return "translate(250, " + (y0(d.Name)) + ")";
  });
};

type = function(d) {
  d.weight_in_g = +d.weight_in_g;
  d.Protein_in_g = +d.Protein_in_g;
  d.Sugar_in_g = +d.Sugar_in_g;
  d.Saturated_Fat_in_g = +d.Saturated_Fat_in_g;
  return d;
};

onKeyDown = function(evt) {
  var A, SPACE, Z, key_pressed;
  SPACE = 32;
  A = 65;
  Z = 90;
  key_pressed = evt.keyCode;
  if (key_pressed === SPACE) {
    sort_string = sort_string === 'Name' ? 'weight_in_g' : 'Name';
    update();
  }
  if (key_pressed === A) {
    return log('A');
  }
};

onClick = function(evt) {
  var class_name, target;
  target = evt.target.tagName;
  class_name = evt.target.className;
  if (target === 'LI') {
    if (class_name === 'protein') {
      sort_string = 'Protein_in_g';
    }
    if (class_name === 'fat') {
      sort_string = 'Saturated_Fat_in_g';
    }
    if (class_name === 'sugar') {
      sort_string = 'Sugar_in_g';
    }
    if (class_name === 'sodium') {
      sort_string = 'Sodium_in_mg';
    }
    return update();
  }
};

document.addEventListener('keydown', onKeyDown);

document.body.addEventListener('click', onClick);

/*
//@ sourceMappingURL=main.map
*/
